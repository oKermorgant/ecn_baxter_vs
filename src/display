#!/usr/bin/env python

'''
Plots relative joints and VS error
'''
import time

import pylab as pl
import roslib, rospy, rospkg
from sensor_msgs.msg import JointState
import os
import warnings
import sys

#sys.tracebacklimit=0
warnings.filterwarnings("ignore")

sys.excepthook = lambda exctype,exc,traceback : 1

rate = 10
DT = 10

class Listener:
    def __init__(self, topic):
        
        self.history = []
        self.t = []
        self.t0 = 0
        self.dim = 0
        self.lock = False
        self.legend = []
        self.ylabel = ""
        
        rospy.Subscriber(topic, JointState, self.read)
        
        # init lines
        self.lines = []
        self.joints = "joint" in topic
        
        # init figure
        self.F = pl.figure()
        self.ax = self.F.gca()
        self.ax.set_xlabel('Time [s]')        

    def read(self, msg):
        if not self.lock:
            self.legend = msg.name
            self.ylabel = msg.header.frame_id
            # append history 
            self.history.append(msg.position)
            if not self.t0:
                self.t0 = rospy.Time.now().to_sec()
            t = rospy.Time.now().to_sec() - self.t0
            self.t.append(t)
            
            self.dim = len(msg.position)
            
    def update(self):
        # remove old measurements
        self.lock = True
        if self.dim:
            idx = 0
            while self.t[-1] - self.t[idx] > DT:
                idx += 1
            self.history = self.history[idx:]
            self.t = self.t[idx:]
            
            if len(self.lines):
                try:
                    if rospy.Time.now().to_sec() - self.t0 - self.t[-1] > 1:
                        print('No more messages')
                        rospy.signal_shutdown('No more messages')
                        
                    # update lines
                    for i in xrange(self.dim):
                        self.lines[i].set_data(self.t, [h[i] for h in self.history])
                    
                    # update zero
                    self.lines[i+1].set_data([self.t[0],self.t[-1]],[0,0])
                    
                    if self.joints:
                        self.lines[i+2].set_data([self.t[0],self.t[-1]],[1,1])
                        yM = 1
                        ym = 0
                    else:
                        y = [h[i] for h in self.history for i in xrange(self.dim)]
                        yM = max(y)
                        ym = min(y)
                    self.ax.axis((self.t[0],self.t[-1],ym - 0.05*(yM-ym), yM+0.05*(yM-ym)))
                    self.F.canvas.draw()
                except:
                    pass
                    
            else:
                # init plot

                plot_colors = ['b','g','r','c','m','y']
                plot_markers = ['', 'o', 's', 'x', 'D', 'p', '+']                    
                for i in xrange(self.dim):
                    col = plot_colors[i % len(plot_colors)]
                    mk = plot_markers[i % len(plot_markers)]
                    self.lines += self.ax.plot([],[], col+mk+'-',label=self.legend[i],linewidth=2,markevery=DT*rate/10)
                self.ax.legend(loc='lower right')
                self.ax.set_ylabel(self.ylabel)

                if self.joints:
                    # joint limits
                    
                    for i in (1,2):
                        self.lines += self.ax.plot([],[],'k-',linewidth=4)
                        self.ax.set_yticks([0,1])
                        self.ax.set_yticklabels(['$q^-$','$q^+$'])
                else:
                    # zero line
                    self.lines += self.ax.plot([],[],'k--')                
                self.F.tight_layout()        
            
        self.lock = False

        
if __name__ == '__main__':
    '''
    Begin of main code
    '''
    
    rospy.init_node('display')
    
    
    pl.ion()
    pl.close('all')
    
    joint_listener = Listener("joints")
    vs_listener = Listener("vs")            
    
    loop = rospy.Rate(rate)
    
    while not rospy.is_shutdown():
        
        joint_listener.update()
        vs_listener.update()
        try:
            pl.pause(1e-3)
        except:
            pass

        loop.sleep()
        
    pl.close('all')